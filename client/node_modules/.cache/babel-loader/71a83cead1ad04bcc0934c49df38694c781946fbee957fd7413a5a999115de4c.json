{"ast":null,"code":"var _jsxFileName = \"D:\\\\3\\u043A\\u0443\\u0440\\u0441\\\\\\u0412\\u0415\\u0411\\\\\\u041F\\u0430\\u043A\\u0442\\u0438\\u043A\\u0430\\\\practice\\\\client\\\\src\\\\components\\\\UserContext.js\",\n  _s = $RefreshSig$();\nimport React, { createContext, useState } from 'react';\n\n// Создаем контекст\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nexport const UserContext = /*#__PURE__*/createContext();\n\n// Создаем провайдер контекста\nexport const UserProvider = ({\n  children\n}) => {\n  _s();\n  // Состояние, в котором будем хранить информацию о пользователе\n  const [user, setUser] = useState({\n    email: '',\n    role: 'client' // По умолчанию устанавливаем роль 'client'\n  });\n\n  // Функция для установки информации о пользователе\n  const updateUser = userData => {\n    setUser(userData);\n  };\n\n  // Значение, которое будет доступно всем компонентам, использующим этот контекст\n  const contextValue = {\n    user,\n    updateUser\n  };\n\n  // Возвращаем провайдер с заданным контекстом\n  return /*#__PURE__*/_jsxDEV(UserContext.Provider, {\n    value: contextValue,\n    children: children\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(UserProvider, \"uGtWtVKhJEyDqqE8UXxztpS+usw=\");\n_c = UserProvider;\nvar _c;\n$RefreshReg$(_c, \"UserProvider\");","map":{"version":3,"names":["React","createContext","useState","jsxDEV","_jsxDEV","UserContext","UserProvider","children","_s","user","setUser","email","role","updateUser","userData","contextValue","Provider","value","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["D:/3курс/ВЕБ/Пактика/practice/client/src/components/UserContext.js"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\n// Создаем контекст\r\nexport const UserContext = createContext();\r\n\r\n// Создаем провайдер контекста\r\nexport const UserProvider = ({ children }) => {\r\n  // Состояние, в котором будем хранить информацию о пользователе\r\n  const [user, setUser] = useState({\r\n    email: '',\r\n    role: 'client', // По умолчанию устанавливаем роль 'client'\r\n  });\r\n\r\n  // Функция для установки информации о пользователе\r\n  const updateUser = (userData) => {\r\n    setUser(userData);\r\n  };\r\n\r\n  // Значение, которое будет доступно всем компонентам, использующим этот контекст\r\n  const contextValue = {\r\n    user,\r\n    updateUser,\r\n  };\r\n\r\n  // Возвращаем провайдер с заданным контекстом\r\n  return (\r\n    <UserContext.Provider value={contextValue}>\r\n      {children}\r\n    </UserContext.Provider>\r\n  );\r\n};\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,aAAa,EAAEC,QAAQ,QAAQ,OAAO;;AAEtD;AAAA,SAAAC,MAAA,IAAAC,OAAA;AACA,OAAO,MAAMC,WAAW,gBAAGJ,aAAa,CAAC,CAAC;;AAE1C;AACA,OAAO,MAAMK,YAAY,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EAC5C;EACA,MAAM,CAACC,IAAI,EAAEC,OAAO,CAAC,GAAGR,QAAQ,CAAC;IAC/BS,KAAK,EAAE,EAAE;IACTC,IAAI,EAAE,QAAQ,CAAE;EAClB,CAAC,CAAC;;EAEF;EACA,MAAMC,UAAU,GAAIC,QAAQ,IAAK;IAC/BJ,OAAO,CAACI,QAAQ,CAAC;EACnB,CAAC;;EAED;EACA,MAAMC,YAAY,GAAG;IACnBN,IAAI;IACJI;EACF,CAAC;;EAED;EACA,oBACET,OAAA,CAACC,WAAW,CAACW,QAAQ;IAACC,KAAK,EAAEF,YAAa;IAAAR,QAAA,EACvCA;EAAQ;IAAAW,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACW,CAAC;AAE3B,CAAC;AAACb,EAAA,CAxBWF,YAAY;AAAAgB,EAAA,GAAZhB,YAAY;AAAA,IAAAgB,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}